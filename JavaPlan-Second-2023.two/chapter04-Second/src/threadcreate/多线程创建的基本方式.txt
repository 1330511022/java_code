1.线程的创建方式一：继承Thread类(ThreadDemo01)
1.1 步骤：
①创建一个继承于Thread类的子类
②重写Thread类的run方法---->将此线程要执行的操作，声明在此方法中
③创建当前Thread的子类的对象
④通过对象调用start()方法:1.启动线程 2.调用当前线程的run方法


2.线程的创建方式二：实现Runnable接口(ThreadDemo02)
2.1 步骤：
①创建一个实现Runnable接口的类
②实现接口中的run()方法---->将此线程要执行的操作，声明在此方法中
③创建当前实现类的对象
④将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例
⑤Thread类的实例调用start()方法

两种方式的对比

共同点:①启动线程都要调用Thread类中定义start()方法
      ②创建的线程对象，都是Thread类或其子类的实例
不同点:一个是类的继承，一个是接口的实现
       建议：使用实现Runnable接口的方式
       假如要创建多个线程来实现某种功能 但是需要同一种属性（比如说name age）,
       利用实现接口的方式可直接再次创建Thread类的实例 而不用再次创建对象
       对象属性可以被多个线程使用（extends也可以去处理 但是没有Runnable接口实现的方式方便）

       Runnable好处:①实现的方式避免了单继承的局限性
                   ②更适合处理有共享数据的问题
                   ③实现了代码和数据的分离

联系：Public class Thread implements Runnable (代理模式)