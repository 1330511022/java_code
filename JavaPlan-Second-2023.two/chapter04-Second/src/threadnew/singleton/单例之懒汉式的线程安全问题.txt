

解决单例模式中懒汉式的线程安全问题

>饿汉式：不存在线程安全的问题
>懒汉式：存在线程安全的问题（需要使用同步机制来处理）





饿汉式和懒汉式是两种常见的单例模式实现方式：
饿汉式（Eager Initialization）： 在类加载时就创建实例对象，无论是否使用都会创建，因此被称为"饿汉式"。其特点是线程安全，但可能会造成资源浪费。
 示例代码如下：

public class Singleton {
    private static Singleton instance = new Singleton();

    private Singleton() {
        // 私有构造方法
    }

    public static Singleton getInstance() {
        return instance;
    }
}
在上述代码中，instance是在类加载时就创建的，因此在任何时候都可以通过Singleton.getInstance()方法获取到同一个实例对象。

懒汉式（Lazy Initialization）： 在首次使用时才创建实例对象，被称为"懒汉式"。其特点是延迟加载，节省了资源，但需要考虑线程安全的问题。
 示例代码如下：

public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // 私有构造方法
    }

    public static synchronized Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}
在上述代码中，instance是在首次调用getInstance()方法时才创建的，通过synchronized关键字实现了线程安全，但在高并发情况下可能会有性能问题。